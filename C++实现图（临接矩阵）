#include<iostream>
#include<vector>
#include<assert.h>

using namespace std;

//临接矩阵法模拟实现图
template<class V,class W,bool digraph=false>
class Graph
{
public:
	Graph(V* array, size_t size)
		:_v(array, array + size)
	{
		_edges.resize(size);
		size_t i = 0;
		for (i = 0; i < size; i++)
		{
			_edges[i].resize(size);
		}
	}
	//添加边源目标权值
	void Addedges(const V& src, const V& dst, const W& w)
	{
		size_t srcIndex = GetVertexIndex(src);
		size_t dstIndex = GetVertexIndex(dst);
		
		_edges[srcIndex][dstIndex] = w;    //赋权值
		if (digraph == false)          //是无向图
		{
			_edges[dstIndex][srcIndex] = w;
		}
	}
	//获取顶点的度
	int getCount(const V& v)
	{
		int count = 0;
		size_t i = 0;
		int set = GetVertexIndex(v);
		for (i = 0; i < _v.size(); i++)
		{
			if (_edges[set][i] !=0)
				count++;
		}
		return count;
	}

	//打印
	void Display()
	{
		size_t i = 0,j=0;
		size_t size= _v.size();
		for (i = 0; i < size; i++)
		{
			for (j = 0; j < size; j++)
			{
				printf("%2d ",_edges[i][j]);
			}
			cout << endl;
		}
		cout << endl;
	}
private:
	//获取顶点下标
	size_t GetVertexIndex(const V& v)
	{
		size_t i = 0;
		for (i = 0; i < _v.size(); i++)
		{
			if (v == _v[i])
				return i;
		}
		assert(false);
		return -1;
	}

private:
	vector<V> _v;     //顶点集合
	vector<vector<W>> _edges;    //二维数组邻接矩阵
};

void test()
{
	char* p = "ABCDE";
	Graph<char, int,true> g(p, strlen(p));
	g.Addedges('A', 'D', 10);
	g.Addedges('A', 'E', 20);
	g.Addedges('B', 'C', 10);
	g.Addedges('B', 'D', 20);
	g.Addedges('B', 'E', 30);
	g.Addedges('C', 'E', 40);
	
	g.Display();
	cout << g.getCount('B') << endl;
}
