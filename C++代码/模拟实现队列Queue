#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
using namespace std;
#if 0
#define MAX 6    
template<class T>
class Queue          //循环顺序队列
{
public:
	Queue()
	:front(0)
	, back(0)
	, count(0)
	{}
	void Push(T d)
	{
		if (count == MAX)
			return;
		arr[back] = d;
		back++;
		if (back == MAX)
			back = 0;
		count++;
	}
	void Pop()
	{
		if (count == 0)
			return;
		front++;
		if (front == MAX)
			front = 0;
		count--;
	}
	int Back()
	{
		return arr[back+MAX-1];
	}
	int Front()
	{
		return arr[front];
	}
private:
	T arr[MAX];
	int front;
	int back;
	int count;
};

int main()
{
	Queue<char> s;
	s.Push('q');
	s.Push('c');
	s.Push('m');
	s.Push('l');
	s.Push('k');
	s.Push('h');
	s.Push('o');

	char ret=s.Front();
	char back= s.Back();

	s.Pop();
	s.Pop();
	s.Pop();
	s.Pop();
	s.Pop();
	s.Pop();
	s.Pop();
	s.Pop();

	system("pause");
	return 0;
}

#endif

#if 0
typedef struct Node
{
	Node(int d)
	:data(d)
	{}
	int data;
	Node*Next;
}Node;


class Queue
{
public:
	Queue()
	{
		head = NULL;
		tail = NULL;
		size = 0;
	}
	void Push(int d)
	{
		Node*newNode = new Node(d);
		newNode->Next = NULL;
		if (head == NULL)
		{
			head = newNode;
			tail = head;
			size++;
			return;
		}
		tail->Next = newNode;
		tail = tail->Next;
		size++;
	}
	void Pop()
	{
		if (head == NULL)
			return;
		Node*ret = head;
		head = head->Next;
		delete ret;
		ret = NULL;
		size--;
	}
	int Back()
	{
		return tail->data;
	}
	int Front()
	{
		return head->data;
	}
	int Size()
	{
		return size;
	}
private:
	Node*head;
	Node*tail;
	int size;
};
int main()
{
	Queue q;
	q.Push(11);
	q.Push(12);
	q.Push(13);
	q.Push(14);
	q.Push(15);

	int ret=q.Size();
	int tmp = q.Back();
	int f = q.Front();

	q.Pop();
	q.Pop();
	q.Pop();
	q.Pop();
	q.Pop();
	q.Pop();

	system("pause");
	return 0;
}



#endif
