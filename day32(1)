
Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
/////////////////////////////////////
典型的递归回溯法，多做形成这个递归回溯头脑，就好办了。
1 递归一次，填入一个数字

2 填入的数字，不能是小于当前数字的值，防止重复

3 回溯：记得pop_back()最后加上的一个数字，回溯到上一层。

4 结束条件：填写够了k个数字的时候，当前填写完毕，回溯

vector<vector<int> > combine(int n, int k) {
       vector<vector<int>> ret;
       vector<int> tmp;
       if(k>n||k==0)
           return ret;
       combine(ret,tmp,n,k,1);
       return ret;
   }
    void combine(vector<vector<int>>&ret,vector<int> tmp,int n,int k,int start)
    {
        if(tmp.size()==k)
        {
            ret.push_back(tmp);
            return;
        }
        for(int i=start;i<n+1;i++)
        {
            tmp.push_back(i);
            combine(ret,tmp,n,k,i+1);
            tmp.pop_back();
        }
    }
