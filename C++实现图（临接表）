#include<iostream>
#include<vector>
#include<assert.h>

using namespace std;

//临接表实现图
template<class W>
struct LinkNode
{
	LinkNode(size_t srcIndex, size_t dstIndex, const W& w)
	:_srcIndex(srcIndex)
	, _dstIndex(dstIndex)
	, _w(w)
	, Next(NULL)
	{  }

	W _w;
	size_t _srcIndex;  //下标
	size_t _dstIndex;  //临接顶点
	LinkNode<W>* Next;
};

template<class V,class W,bool digrap=false>
class GraphTable
{
	typedef LinkNode<W> Node;
public:
	GraphTable(V* array,size_t size)
		:_v(array,array+size)
	{
		size_t i = 0;
		_linkGrap.resize(size);
	}

	//添加边 源目标 权值
	void AddEdges(const V& src,const V& dst,const W& w)
	{
		size_t srcIndex = GetVerIndex(src);
		size_t dstIndex = GetVerIndex(dst);

		_AddEdges(srcIndex,dstIndex,w);
		if (digrap == false) //无向图
			_AddEdges(dstIndex, srcIndex, w);
	}

	//度
	size_t getCount(const V& v)
	{
		int count = 0;
		if (digrap == false)
		{
			int ret = GetVerIndex(v);
			Node* tmp = _linkGrap[ret];
			while (tmp)
			{
				tmp = tmp->Next;
				count++;
			}
		}
		else
		{
			Node* tmp = NULL;
			for (size_t i = 0; i < _v.size(); i++)
			{
				tmp = _linkGrap[i];
				while (tmp)
				{
					if ((_v[i]==v)||(_v[tmp->_dstIndex]==v))
						count++;

					tmp = tmp->Next;
				}
			}
		}
		return count;
	}

	void Display()
	{
		size_t i = 0;
		size_t size = _v.size();
		for (i = 0; i < size; i++)
		{
			Node* ret = _linkGrap[i];
			cout << _v[i] << ": ";
			while (ret)
			{
				cout << _v[ret->_dstIndex] << "(" << ret->_w << ") -> ";
				ret = ret->Next;
			}
			cout << endl;
		}
		cout << endl;
	}

private:
	//获取顶点下标
	size_t GetVerIndex(const V& v)
	{
		size_t i = 0;
		for (i = 0; i < _v.size(); i++)
		{
			if (v == _v[i])
				return i;
		}
		return -1;
	}
	//...........
	void _AddEdges(size_t srcIndex, size_t dstIndex, const W& w)
	{
		assert(srcIndex >= 0);
		Node* ret = _linkGrap[srcIndex];
		while (ret)
		{
			if (ret->_dstIndex == dstIndex)
				return;
			ret = ret->Next;
		}

		Node* tmp = new Node(srcIndex, dstIndex, w);
		tmp->Next = _linkGrap[srcIndex];
		_linkGrap[srcIndex] = tmp;
	}

private:
	vector<V> _v;  //顶点集合
	vector<Node*> _linkGrap;
};

void test2()
{
	char* p = "ABCDE";
	GraphTable<char, int,true> g(p, strlen(p));
	g.AddEdges('A', 'D', 10);
	g.AddEdges('A', 'E', 20);
	g.AddEdges('B', 'C', 10);
	g.AddEdges('B', 'D', 20);
	g.AddEdges('B', 'E', 30);
	g.AddEdges('C', 'E', 40);

	g.Display();
	cout << g.getCount('C') << endl;
}
