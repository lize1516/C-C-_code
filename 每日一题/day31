//1.有n对括号，有多少种符合要求的组合
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

"((()))", "(()())", "(())()", "()(())", "()()()"

//////////////////////////////////////////////////////////////
void generate(int left,int right,string str,vector<string>& ret)
    {
        if(left==0&&right==0)
        {
            ret.push_back(str);
            return;
        }
        if(left>0)
            generate(left-1,right,str+'(',ret);
        if(right>left)
            generate(left,right-1,str+')',ret);
      
    }
    vector<string> generateParenthesis(int n) {
        vector<string> ret;
        generate(n,n,"",ret);
        return ret;
    }

//2.手机上按键中的字母组合
Given a digit string, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.



Input:Digit string "23" Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

/////////////////////////////////////////////////////////////////////////////////////
void kinds(vector<string>& ret,int index,string& cur,string digits)
    {
        string tel_board[]={"0","1","abc","def","ghi","jkl","mno"\
                           ,"pqrs","tuv","wxyz"};
        if(index==digits.size())
        {
            ret.push_back(cur);
            return;
        }
        string str=tel_board[digits[index]-'0'];
        int i=0;
        for(i=0;i<str.size();i++)
        {
            cur.push_back(str[i]);
            kinds(ret,index+1,cur,digits);
            cur.pop_back();
        }
    }
    
    vector<string> letterCombinations(string digits) {
        vector<string> ret;
        string cur("");
        kinds(ret,0,cur,digits);
        return ret;
    }
