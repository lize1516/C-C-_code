 //单链表排序
ListNode* mergeList(ListNode* list1,ListNode* list2)
    {
        ListNode* newHead=new ListNode(-1);
        ListNode* cur=newHead;
        while(list1!=NULL&&list2!=NULL)
        {
            if(list1->val<=list2->val)
            {
                cur->next=list1;
                list1=list1->next;
            }
            else
            {
                cur->next=list2;
                list2=list2->next;
            }
            cur=cur->next;
        }
        //cur->next=(list1!=NULL ? list1:list2);
        if(list1==NULL)
            cur->next=list2;
        else
            cur->next=list1;
        cur=newHead->next;
        delete newHead;
        return cur;
    }
    
    ListNode *sortList(ListNode *head) {
        if(head==NULL||head->next==NULL)
            return head;
        ListNode* first=head;
        ListNode* slow=head;
        while(first!=NULL&&first->next!=NULL)
         {
               first=first->next-next;
	slow=slow->next;
         }
      
        ListNode* next=slow->next;
            mid->next=NULL;
        return mergeList(sortList(head),sortList(next));
    }

//2.大数求和逆序存放在链表中
ListNode *addTwoNumbers1(ListNode *l1, ListNode *l2) {

	int cur = 0;
	int addF = 0;
	ListNode* newHead = new ListNode(-1);
	ListNode* pre = newHead;
	newHead->next = l1;
	while (l1&&l2)
	{
		cur = SloveSum(l1->val, l2->val, &addF);
		
		l1->val = cur;
		pre= l1;
		l1 = l1->next;
		l2 = l2->next;
	}
	if (l1 == NULL&&l2 != NULL)
	{
		pre->next = l2;
		while (l2)
		{
			cur = SloveSum(0, l2->val, &addF);

			l2->val = cur;
			pre = l2;
			l2 = l2->next;
		}
		if (addF == 1)
		{
			ListNode* newNode = new ListNode(1);
			pre->next = newNode;
		}
	}
	else if (l1 != NULL&&l2 == NULL)
	{
		while (l1)
		{
			cur = SloveSum(l1->val, 0, &addF);

			l1->val = cur;
			pre = l1;
			l1 = l1->next;
		}
		if (addF == 1)
		{
			ListNode* newNode = new ListNode(1);
			pre->next = newNode;
		}
	}
	else
	{
		if (addF == 1)
		{
			ListNode* newNode = new ListNode(1);
			pre->next = newNode;
		}
	}

	return newHead->next;
}
