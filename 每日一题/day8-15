//1.二叉树前序遍历，非递归
vector<int> preorderTraversal(TreeNode *root) {
        vector<int> ret;
        if(root==NULL)
            return ret;
        stack<TreeNode*> s;
        s.push(root);
        while(!s.empty())
        {
            TreeNode* temp=s.top();
            s.pop();
            while(temp)
            {
                ret.push_back(temp->val);
                if(temp->right)
                   s.push(temp->right);
                temp=temp->left;
            }
        }
        return ret;
    }
    

//2.后序遍历二叉树，非递归
vector<int> postorderTraversal(TreeNode *root) {
        vector<int> ret;
        if(root==NULL)
            return ret;
        stack<TreeNode*> s;
        TreeNode* cur=root;
        TreeNode* flag=NULL;
        while(cur||!s.empty())
        {
            while(cur){
                s.push(cur);
                cur=cur->left;
            }
            cur=s.top();
            if(cur->right==NULL||flag==cur->right)
            {
                ret.push_back(cur->val);
                flag=cur;
                s.pop();
                cur=NULL;
            }
            else
                cur=s.top()->right;
        }
        return ret;
    }
