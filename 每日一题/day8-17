//1.根据中序遍历和后序遍历，创建出二叉树
TreeNode* CreateBST(vector<int> inorder,vector<int> postorder,int instart,int inEnd,int poststart,int postEnd)
    {
        if(instart>inEnd||poststart>postEnd)
            return NULL;
        TreeNode* root=new TreeNode(postorder[postEnd]);
        int i=0;
        for(i=instart;i<inEnd;i++)
        {
            if(inorder[i]==postorder[postEnd])
                break;
        }
        root->left=CreateBST(inorder,postorder,instart,i-1,poststart,poststart+i-instart-1);
        root->right=CreateBST(inorder,postorder,i+1,inEnd,poststart+i-instart,postEnd-1);
        return root;
    }
    TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) {
        if(inorder.size()==0||postorder.size()==0)
            return NULL;
        return CreateBST(inorder,postorder,0,inorder.size()-1,0,postorder.size()-1);
    }
    
//2.判断两个二叉树是否相同
 bool isSameTree(TreeNode *p, TreeNode *q) {
        if(p==NULL&&q==NULL)
            return true;
        if(p==NULL||q==NULL)
            return false;
        if(p->val==q->val)
          return isSameTree(p->left,q->left)&&isSameTree(p->right,q->right);
        else
            return false;
    }
