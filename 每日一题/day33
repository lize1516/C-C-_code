 Given a string containing only digits, restore it by returning all possible valid IP address combinations.

For example:
Given"25525511135",

return["255.255.11.135", "255.255.111.35"]. (Order does not matter)
//显示出所有的符合要求的IP地址组合
 ////////////////////////////////////////////////////////////////////////////////////////
 bool isValid(string s) {
        return (s.length() >= 1 && s.length() <= 3 && (s[0] != '0' || s.length() == 1) && stoi(s) <= 255);
    }
  vector<string> restoreIpAddresses(string s) {
        vector<string> result;
        int len = s.length();
        for (int i = 1; i <= 3 && i <= len - 3; i++) {
            for (int j = 1; j <= 3 && j <= len - i - 2; j++) {
                for (int k = 1; k <= 3 && k <= len - i - j - 1; k++) {
                    string cur1 = s.substr(0, i);  //substr() 生成子字符串函数
                    string cur2 = s.substr(i, j);
                    string cur3 = s.substr(i + j, k);
                    string cur4 = s.substr(i + j + k, len);
                    if (isValid(cur1) && isValid(cur2) && isValid(cur3) && isValid(cur4)) 
                        result.push_back(cur1 + "." + cur2 + "." + cur3 + "." + cur4);
                }
            }
        }
        return result;
    }


//2.
Given a collection of numbers, return all possible permutations.

For example,
[1,2,3]have the following permutations:
[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2], and[3,2,1].
//罗列出所有不重复的组合
/////////////////////////////////////////////////////////////////
vector<vector<int> > permute(vector<int> &num) {
        vector<vector<int>> ret;
        if (num.size()==0)
            return ret;
        
        ret.push_back(vector<int>(1,num[0]));
        
        for(int i=1;i<num.size();i++)
        {
            vector<vector<int>> tmp;
            
            for(int j=0;j<=i;j++)
            {
                for(auto p: ret)
                {
                    p.insert(p.begin()+j,num[i]);
                    tmp.push_back(p);
                }
            }
            ret=tmp;
        }
        return ret;
    }
