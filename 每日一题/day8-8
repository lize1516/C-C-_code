//1.两个链表相加，返回相加后的链表
//例： 2->4->3  ,  5->6->7
//返回：7->0->8

ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
        int cur=0;
        ListNode* newhead=new ListNode(-1);
        ListNode* tail=newhead;
        int temp=0;
        while(l1!=NULL||l2!=NULL)
        {
            if(l1!=NULL&&l2!=NULL)
            {
                temp=l1->val+l2->val+cur;
                if(temp>=10)
                   cur=1;
                else
                   cur=0;
                l1=l1->next;
                l2=l2->next;
            }
            else if(l1!=NULL&&l2==NULL)
            {
                temp=l1->val+cur;
                if(temp>=10)
                   cur=1;
                else
                   cur=0;
                l1=l1->next;
            }
            else if(l1==NULL&&l2!=NULL)
            {
                temp=l2->val+cur;
                if(temp>=10)
                   cur=1;
                else
                   cur=0;
                l2=l2->next;
            }
            temp=temp%10;
            ListNode* newNode=new ListNode(temp);
            tail->next=newNode;
            tail=tail->next;
        }
        if(cur==1)
        {
            ListNode* newNode=new ListNode(1);
            tail->next=newNode;
            tail=tail->next;
        }
        return newhead->next;
    }
    
    //2.二叉树层序遍历，按层打印，每层是从左到右打印
    vector<vector<int> > Print(TreeNode* pRoot) {
            vector<vector<int>> ret;
            vector<int> temp;
            if(pRoot==NULL)
                return ret;
            queue<TreeNode*> q;
            q.push(pRoot);
            int count=1;
            while(!q.empty())
            {
                 int num=count;
                     count=0;
                 while(num--)
                 {
                     TreeNode* Node=q.front();
                     q.pop();
                     temp.push_back(Node->val);
                     if(Node->left)
                     {
                         q.push(Node->left);
                         count++;
                     }
                     if(Node->right)
                     {
                         q.push(Node->right);
                         count++;
                     }
                 }
                ret.push_back(temp);
                temp.clear();
            }
            return ret;
        }
    
