//1.和并两个递增单链表，合并后仍为单调不减链表 
 
 ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
    {
        if(pHead1==NULL&&pHead2==NULL)
            return NULL;
        if(pHead1==NULL)
            return pHead2;
        if(pHead2==NULL)
            return pHead1;
        ListNode* newhead=new ListNode(-1);
        ListNode* tail=newhead;
        while(pHead1&&pHead2)
        {
            if(pHead1->val<pHead2->val)
            {
                tail->next=pHead1;
                pHead1=pHead1->next;
                tail=tail->next;
            }
            else
            {
                tail->next=pHead2;
                pHead2=pHead2->next;
                tail=tail->next;
            }
        }
        if(pHead1==NULL&&pHead2!=NULL)
            tail->next=pHead2;
        if(pHead1!=NULL&&pHead2==NULL)
            tail->next=pHead1;
        ListNode* ret=newhead->next;
        delete newhead;
        return ret;
    }

//2.复杂链表的拷贝
RandomListNode* Clone(RandomListNode* pHead)
    {
        if(pHead==NULL)
            return NULL;
        RandomListNode* temp=pHead;
        RandomListNode* p=NULL;
        while(temp)                       //插入新节点
        {
            p=temp->next;
            RandomListNode* newNode=new RandomListNode(temp->label);
            temp->next=newNode;
            newNode->next=p;
            temp=p;
        }
        temp=pHead;       //重置temp指向
        RandomListNode* Next=NULL;      //Next是指向新插入的节点
        while(temp)           //给新插入的节点的random指针域赋值
        {
            Next=temp->next;
            if(temp->random)
            Next->random=temp->random->next;
            temp=Next->next;
        }
        temp=pHead;
        RandomListNode* ret=temp->next;   //返回值
        while(temp)
        {
           /* Next=temp->next;
            temp->next=Next->next;
            temp=temp->next;
            if(temp)
                Next->next=temp->next;
                */
            Next=temp->next;
            p=Next->next;
            temp->next=p;
            if(p!=NULL)
            Next->next=p->next;
            temp=p;
            
        }
        return ret;
   }

///////////////////////////////////////////////////////////////
//3.动态规划问题，找最短路径
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]

The minimum path sum from top to bottom is11(i.e., 2 + 3 + 5 + 1 = 11).

Note: 
Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.
///////////
int minimumTotal(vector<vector<int> > &triangle) {
        
        for(int i=triangle.size()-2;i>=0;--i)
        {
            for(int j=0;j<i+1;++j)
            {
                if(triangle[i+1][j]>triangle[i+1][j+1])
                   triangle[i][j]+=triangle[i+1][j+1];
                else
                    triangle[i][j]+=triangle[i+1][j];
            }
        }
        return triangle[0][0];
    }
    
//4.找两个链表的第一个公共节点
     ListNode* FindFirstCommonNode( ListNode* pHead1, ListNode* pHead2) {
        if(pHead1==NULL&&pHead2==NULL)
            return NULL;
        int count1=0;
        int count2=0;
        ListNode* p1=pHead1;
        ListNode* p2=pHead2;
        while(p1)
        {
            count1++;
            p1=p1->next;
        }
        while(p2)
        {
            count2++;
            p2=p2->next;
        }
        if(count1>count2)
            return FindNode(pHead1,pHead2,count1-count2);
        else
            return FindNode(pHead2,pHead1,count2-count1);
    }
     ListNode* FindNode(ListNode* root1,ListNode* root2,int k)
     {
         while(k--)
             root1=root1->next;
         for(;;)
         {
             if(root1==root2)
                 return root1;
             root1=root1->next;
             root2=root2->next;
         }
         return NULL;
     }


//5.将一个二叉搜索树转换成双向链表，不能开辟额外的节点
void Change(TreeNode* head,TreeNode*& prev)
    {
        if(head==NULL)
            return;
        Change(head->left,prev);   //找到最左侧的节点
        head->left=prev;
        
        if(prev!=NULL)             //如果前一个节点不为空，令其右分支指向当前节点
            prev->right=head;
        
        prev=head;                //将当前节点赋值给prev
        Change(head->right,prev);    //处理右分支
    }
    TreeNode* Convert(TreeNode* pRootOfTree)
    {
        if(pRootOfTree==NULL)
            return NULL;
        TreeNode* head=pRootOfTree;
        while(head->left!=NULL)
            head=head->left;
        TreeNode* prev=NULL;
        Change(pRootOfTree,prev);
        
        return head;
    }
