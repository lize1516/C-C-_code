//1.和并两个递增单链表，合并后仍为单调不减链表 
 
 ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
    {
        if(pHead1==NULL&&pHead2==NULL)
            return NULL;
        if(pHead1==NULL)
            return pHead2;
        if(pHead2==NULL)
            return pHead1;
        ListNode* newhead=new ListNode(-1);
        ListNode* tail=newhead;
        while(pHead1&&pHead2)
        {
            if(pHead1->val<pHead2->val)
            {
                tail->next=pHead1;
                pHead1=pHead1->next;
                tail=tail->next;
            }
            else
            {
                tail->next=pHead2;
                pHead2=pHead2->next;
                tail=tail->next;
            }
        }
        if(pHead1==NULL&&pHead2!=NULL)
            tail->next=pHead2;
        if(pHead1!=NULL&&pHead2==NULL)
            tail->next=pHead1;
        ListNode* ret=newhead->next;
        delete newhead;
        return ret;
    }

//2.复杂链表的拷贝
RandomListNode* Clone(RandomListNode* pHead)
    {
        if(pHead==NULL)
            return NULL;
        RandomListNode* temp=pHead;
        RandomListNode* p=NULL;
        while(temp)                       //插入新节点
        {
            p=temp->next;
            RandomListNode* newNode=new RandomListNode(temp->label);
            temp->next=newNode;
            newNode->next=p;
            temp=p;
        }
        temp=pHead;       //重置temp指向
        RandomListNode* Next=NULL;      //Next是指向新插入的节点
        while(temp)           //给新插入的节点的random指针域赋值
        {
            Next=temp->next;
            if(temp->random)
            Next->random=temp->random->next;
            temp=Next->next;
        }
        temp=pHead;
        RandomListNode* ret=temp->next;   //返回值
        while(temp)
        {
           /* Next=temp->next;
            temp->next=Next->next;
            temp=temp->next;
            if(temp)
                Next->next=temp->next;
                */
            Next=temp->next;
            p=Next->next;
            temp->next=p;
            if(p!=NULL)
            Next->next=p->next;
            temp=p;
            
        }
        return ret;
   }
