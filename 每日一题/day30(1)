//1.矩阵中某个元素为0，则该行与该列元素全部置0

void setzeros(vector<vector<int>>&matrix)
{
	const int m = matrix.size();
	const int n = matrix[0].size();
	bool row = false;
	bool column = false;

	for (int i = 0; i < m; i++)
	{
		if (matrix[i][0] == 0)
		{
			row = true;
			break;
		}
	}
	for (int j = 0; j < n; j++)
	{
		if (matrix[0][j] == 0)
		{
			column = true;
			break;
		}
	}
	for (int i= 1; i < m; i++)
	{
		for (int j = 1; j < n; j++)
		{
			if (matrix[i][j] == 0)
			{
				matrix[0][j] = 0;
				matrix[i][0] = 0;
			}
		}
	}
	for(int i = 1; i < m; ++i)
	{
		if(matrix[i][0] == 0)
		{
			for(int j = 1; j < n; ++j)
			{
				matrix[i][j] = 0;
			}
		}
	}

	for(int j = 1; j < n; ++j)
	{
		if(matrix[0][j] == 0)
		{
			for(int i = 1; i < m; ++i)
			{
				matrix[i][j] = 0;
			}
		}
	}
	
	if (row)
	{
		for (int i = 0; i < m; i++)
			matrix[i][0] = 0;
	}
	if (column)
	{
		for (int j = 0; j < n; j++)
			matrix[0][j] = 0;
	}
}
int main()
{
	int arr[][5] = { { 0, 1, 2, 3, 4 },
	                 { 5, 6, 7, 0, 8 }, \
	                 {9, 10, 1, 11, 12} };
	vector<int> v1;
	vector<vector<int>> ret;
	for (int i = 0; i < 3; i++)
		ret.push_back(v1);

	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 5; j++)
		{
			ret[i].push_back(arr[i][j]);
		}
	}
	setzeros(ret);

	system("pause");
	return 0;
}




//2.Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
['A','B','C','E'],
['S','F','C','S'],
['A','D','E','E']
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.
即在一个给定的字符的二维矩阵中寻找是否有给定的单词。每个字母必须相连，只能出现一次。




bool findword(vector<vector<char>>&board,string word,vector<vector<bool>>&visited,int line,int col,int index)
{
	if (index == word.size())
		return true;
	if (col < 0 || line < 0 || line >= board.size() || col >= board[0].size() || visited[line][col] || board[line][col] != word[index])
		return false;
	visited[line][col] = true;
	if (findword(board, word, visited, line - 1, col, index + 1))
		return true;
	if (findword(board, word, visited, line+1, col, index + 1))
		return true;
	if (findword(board, word, visited, line , col-1, index + 1))
		return true;
	if (findword(board, word, visited, line , col+1, index + 1))
		return true;

	visited[line][col] = false;
	return false;
}
bool exist(vector<vector<char>>& board, string word) {
	if (board.empty() || board[0].empty())
		return false;

	vector<vector<bool>> visited(board.size(), vector<bool>(board[0].size(), false));
	int i, j;
	int line = board.size();

	for (i = 0; i < line; i++)
	{
		for (j = 0; j < board[i].size(); j++)
		{
			if (findword(board, word, visited, i, j, 0))
				return true;
		}
	}
	return false;
}

int main()
{
	char arr[][5] = { "ABCE", "SFCS", "ADEE" };
	char*ch = "ABCCED";
	string key(ch,6);
	vector<char> t1;
	vector<vector<char>> str;
	for (int i = 0; i < 3; i++)
	{
		str.push_back(t1);
	}
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			str[i].push_back(arr[i][j]);
		}
	}

	if (exist(str, key))
		cout << "true" << endl;
	else
		cout << "false" << endl;

	system("pause");
	return 0;
}
