//1.判断一棵二叉树，是否是二叉搜索树

bool IsBST(TreeNode* root,int min,int max)
    {
        if(root==NULL)
            return true;
        if(root->val<min||root->val>max)
            return false;
        return IsBST(root->left,min,root->val-1)&&IsBST(root->right,root->val+1,max);
    }
    bool isValidBST(TreeNode *root) {
        return IsBST(root,INT_MIN,INT_MAX);
    }

//2.一棵二叉搜索树中有两个节点存放错误，请将该二叉搜索树还原
 TreeNode *s1,*s2,*pre;
    void FindTwoNum(TreeNode* root)
    {
        if(root==NULL)
            return;
        FindTwoNum(root->left);
        if(pre&&pre->val>root->val)
        {
            if(s1==NULL){
                s1=pre;
                s2=root;
            }
            else
                s2=root;
        }
        pre=root;
        FindTwoNum(root->right);
    }
    void recoverTree(TreeNode *root) {
        if(root==NULL)
            return;
        s1=s2=pre=NULL;
        FindTwoNum(root);
        swap(s1->val,s2->val);
    }
