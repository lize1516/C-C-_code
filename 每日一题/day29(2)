Given two words (start and end), and a dictionary, find all shortest transformation sequence(s) from start to end, such that:
Only one letter can be changed at a time
Each intermediate word must exist in the dictionary
For example,

Given:
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]
Return
  [
    ["hit","hot","dot","dog","cog"],
    ["hit","hot","lot","log","cog"]
  ]

题意说明：从start变换到end，途中只能经过字典中的单词，每次只允许差一个字母。
要求输出所有变换路径。
分析：题倒是不难，但时间卡的特别紧。
常规方法：BFS搜索，节点的数据结构包含：当前单词、记录变换路径的hash表、记录变换路径的ArrayList。
搜索所有和当前单词只差一个字母的单词，查询新单词是否在字典中同时是否已经存在于变换路径中，如果在
字典中同时不在已有的变换路径中，把新单词放入队列，继续BFS。代码如下，可惜大数据超时。


int ladderLength(string start, string end, unordered_set<string> &dict) {
       if(dict.empty()||start==end)
           return 0;
        queue<string> strq;
        queue<int> depq;
        strq.push(start);
        depq.push(1);
        string cur,nxt;
        int depth;
        unordered_set<string> visited;
        while(!strq.empty())
        {
            nxt=cur=strq.front();
            strq.pop();
            depth=depq.front();
            depq.pop();
            if(cur==end)
                return depth;
            for(int i=0;i<cur.length();i++)
            {
                for(char ch='a';ch<='z';ch++)
                {
                    if(ch!=cur[i])
                    {
                        nxt[i]=ch;
                        if(dict.find(nxt)!=dict.end()&&visited.find(nxt)==visited.end())
                        {
                            visited.insert(nxt);
                            strq.push(nxt);
                            depq.push(depth+1);
                        }
                        nxt=cur;
                    }
                }
            }
        }
        return 0;
    }
