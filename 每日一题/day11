//day11
//找两条链表的第一个交点
#if 0
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
		val(x), next(NULL) {
	}
};

ListNode* FindFirstCommonNode(ListNode* pHead1, ListNode* pHead2) {
	if (pHead1 == NULL || pHead2 == NULL)
		return NULL;
	ListNode* list1 = pHead1;
	ListNode* list2 = pHead2;
	int count1 = 0;
	int count2 = 0;
	while (list1)
	{
		count1++;
		list1 = list1->next;
	}
	while (list2)
	{
		count2++;
		list2 = list2->next;
	}
	int num = 0;
	list1 = pHead1;
	list2 = pHead2;
	if (count1 > count2)
	{
		num = count1 - count2;
		while (num--)
		{
			list1 = list1->next;
		}
	}
	else
	{
		num = count2 - count1;
		while (num--)
		{
			list2 = list2->next;
		}
	}

	while(list1 != NULL)
	{
		if (list1 == list2)
			break;
		list1 = list1->next;
		list2 = list2->next;
	}

	return list1;
}

////////////////////////
//2.找重复数字
bool duplicate(int numbers[], int length, int* duplication) {
	
	int *arr = new int[length];
	memset(arr, 0, length*sizeof(int));
	for (int i = 0; i < length; i++)
	{
		arr[numbers[i]]++;
		if (arr[numbers[i]] == 2)
		{
			*duplication = numbers[i];
			return true;
		}
	}
	return false;
}
int main()
{

	int arr1[] = { 2, 1, 3, 1, 4 };
	int d = 0;
	duplicate(arr1, 5, &d);
	cout << d << endl;

	system("pause");
	return 0;
}

