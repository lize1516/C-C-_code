//1.返回链表倒数第k个节点（方法一）
ListNode* FindKthToTail(ListNode* pListHead, unsigned int k) {
       if(pListHead==NULL)
           return NULL;
        ListNode* fast=pListHead;
        ListNode* slow=pListHead;
        while(k--)
        {
            fast=fast->next;
            if(fast==NULL&&k!=0)
                return NULL;
        }
        if(fast==NULL)
            return slow;
        while(fast)
        {
            fast=fast->next;
            slow=slow->next;
        }
        return slow;
    }
//返回链表倒数第k个节点（方法二）
ListNode* FindKthToTail(ListNode* pListHead, unsigned int k) {
       if(pListHead==NULL)
           return NULL;
        ListNode* cur=pListHead;
        int size=0;
        while(cur)
        {
            cur=cur->next;
            size++;
        }
        if(k>size)
            return NULL;
        ListNode* slow=pListHead;
        k=size-k;
        while(k--)
        {
           slow=slow->next;
        }
        return slow;
    }

////////////////////////////////////
//2.地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，
但是不能进入行坐标和列坐标的数位之和大于k的格子。 
例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。
请问该机器人能够达到多少个格子？
//////////////////////////////////////////////////
int movingCount(int threshold, int rows, int cols)       
    {
        bool* flag=new bool[rows*cols];
        for(int i=0;i<(rows*cols);i++)
            flag[i]=false;
        
        int count=_movingCount(threshold,rows,cols,0,0,flag);
        delete[] flag;
        return count;
    }
    int _movingCount(int threshold,int rows,int cols,int row,int col,bool* flag)      //递归探查可以到达多少个格子
    {
        int count=0;
        if(check(threshold,rows,cols,row,col,flag))
        {
            flag[row*cols+col]=true;
            count=1+_movingCount(threshold,rows,cols,row-1,col,flag)+
                _movingCount(threshold,rows,cols,row,col+1,flag)+
                _movingCount(threshold,rows,cols,row+1,col,flag)+
                _movingCount(threshold,rows,cols,row,col-1,flag);
        }
        return count;
    }
    bool check(int threshold,int rows,int cols,int row,int col,bool* flag)       //判断下标是否符合要求
    {
        if(row>=0&&row<rows&&col>=0&&col<cols&&(GetDigitSum(row)+GetDigitSum(col))<=threshold&&!flag[row*cols+col])
            return true;
        else
            return false;
    }
    int GetDigitSum(int num)                  //将数字转换成各位之和
    {
        int ret=0;
        while(num)
        {
            ret=ret+num%10;
            num=num/10;
        }
        return ret;
    }
