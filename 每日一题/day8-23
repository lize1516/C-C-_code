//1.正则匹配,"."表示任意字符出现一次，"*"表示之前的字符出现任意次
bool match(char* str, char* pattern)
{
	if (*str == '\0' && *pattern == '\0')
		return true;
	if(*str!='\0'&& *pattern == '\0')
		return false;

	if(*(pattern+1)!='*')
	{
		if(*str ==*pattern||(*str!='\0'&&*pattern=='.'))
			return match(str+1,pattern+1);
		else
			return false;
	}
	else
	{
		if(*str==*pattern||(*str != '\0'&& *pattern=='.'))
			return match(str+1,pattern+2)||match(str+1,pattern)||match(str,pattern+2);
		else
			return match(str,pattern+2);
	}
}


//2.反转字符串中的每一个单词
 void reverse(string& str,int left,int right)
    {
        while(left<right)
        {
            char ch=str[left];
            str[left]=str[right];
            str[right]=ch;
            left++;
            right--;
        }
    }
    string ReverseSentence(string str) {
        int size=str.size();
        if(size==0)
            return str;
        reverse(str,0,size-1);
        int left=0,right=0;
        int i=0;
        while(i<size)
        {
            while(str[i]==' ')
                i++;
            left=i;
            while(str[i]!=' '&&i<size)
            {
                i++;
            }
            right=i-1;
            reverse(str,left,right);
        }
        return str;
    }
