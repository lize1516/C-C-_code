//堆栈的使用1
#if 0
#include<stack>

stack<int> s1;
stack<char> result1;
stack<char> result2;

void test()
{
	int n = 0;
	int temp = 0;
	char ch;
	while (cin >> n)
	{
		while (n--)
		{
			cin >> ch;
			switch (ch)
			{
			case 'P':
				cin >> temp;
				s1.push(temp);
				break;
			case 'A':
				if (s1.empty())
					result1.push('E');
				else
					result1.push(s1.top() + '0');
				break;
			case 'O':
				if (!s1.empty())
					s1.pop();
				break;
			default:
				break;
			}
		}
		result1.push('\n');
	}
		cout << endl;
	
	int _size = result1.size();
	int i = 0;
	for (i = 0; i < _size; i++)
	{
		result2.push(result1.top());
		result1.pop();
	}
	for (i = 0; i < _size; i++)
	{
		if (result2.top() == '\n')
			cout << endl;
		else
		cout << result2.top() << endl;

		result2.pop();
	}
}

int main()
{
	test();

	system("pause");
	return 0;
}
//////终止输入 ctrl+z    enter


////////////////////////////////////////
//2.使用两个栈实现一个队列
#include<stack>
stack<int> stack1;
stack<int> stack2;
void push(int node) {
	stack1.push(node);
}

int pop() {
	int ret = 0;
	if (stack2.empty()&&(!stack1.empty()))
	{
		int i = 0;
		int size = stack1.size();
		for (i = 0; i < size; i++)
		{
			stack2.push(stack1.top());
			stack1.pop();
		}
		ret = stack2.top();
		stack2.pop();
	}
	else if (!stack2.empty())
	{
		ret = stack2.top();
		stack2.pop();
	}
	else if (stack1.empty() && stack2.empty())
	{
		return NULL;
	}
	return ret;
}

int main()
{
	
	system("pause");
	return 0;
}
