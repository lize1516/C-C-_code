//////////////1.牛分苹果
int sortApple2(int n, vector<int> v)
{
	int sum = 0;
	for (int i = 0; i < n; i++)
	{
		sum += v[i];
	}
	if (sum%n != 0)
		return -1;
	int average = sum / n;
	int count = 0;
	for (int m = 0; m < n; m++)
	{
		while (v[m] != average)
		{
			if (v[m] < average)
				v[m] += 2;
			else if (v[m]>average)
				v[m] -= 2;
			count++;
		}
	}
	return count/2;
}

int main()
{
	int n = 0;
	vector<int> arr(5);
	cin >> n;
	arr.resize(n);
	for (int i = 0; i<n; i++)
	{
		cin >>arr[i];
	}
	cout << sortApple2(n, arr) << endl;;

	system("pause");
	return 0;
}

//////////////////////
//2. 求连续数字最大和
#include<algorithm>

int  maxsum(vector<int> array)
{
	int size=array.size();
	vector<int> cur(size);
	int sum=0;
	for(int i=0;i<size;i++)
	{
		sum+=array[i];
		if(sum<0)
		{
			cur[i]=array[i];
			sum=0;
		}
		else
		cur[i]=sum;
	}
	sort(cur.begin(),cur.end());
	return cur[size-1];
}

//3.给一个字符串，判断是否可以通过加一个字母使其变成回文串。
#include<string>

bool IsBackstr(string str)
{
	string back=str;
	reverse(back.begin(),back.end());
	return str == back;
}

bool IsStr(string arr)
{
	int size = arr.size();
	for (int i = 0; i < size; i++)
	{
		if (IsBackstr(arr.substr(0, i) + arr.substr(i + 1, size)))
			return true;
	}
	return false;
}
int main()
{
	string Str;
	cin >> Str;
	if (IsStr(Str))
		cout << "YES" << endl;
	else
		cout << "NO" << endl;

	system("pause");
	return 0;
}

//4.将一个数变成斐波那契额数的最小步数（每次操作只能加一或者减一）
//方法一
int Fib(int n)
{
	int a = 0;
	int b = 1;
	int c = 0;
	for (int i = 1; i < n; i++)
	{
		c = a + b;
		a = b;
		b = c;
	}
	return c;
}
int find(int n)
{
	int num1 = 0;
	int num2 = 0;
	for (int i = 1; i <= n; i++)
	{
		num1 = Fib(i);
		num2 = Fib(i + 1);
		if (n == num1 || n == num2)
			return 0;
		if (num1<n&&num2>n)
		{
			int count1 = n - num1;
			int count2 = num2 - n;
			return count1 < count2 ? count1 : count2;
		}
	}
	return -1;
}
int main()
{
	int n = 0;
	cin >> n;
	int ret=find(n);
	cout << ret << endl;
	system("pause");
	return 0;
}
//方法二
int main(){

	int N;
	while (cin>>N) {

		int f0=0,f1=1,f,a=0,b=0;

		while (1) {
			f = f0 + f1;
			f0 = f1;
			f1 = f;
			if (f<N) {
				a = N-f;
			}else{
				b = f-N;
				break;
			}
		}
		int ret = a < b ? a : b;
		cout<<ret<<endl;
	}
	return 0;
}

