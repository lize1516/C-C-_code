//1.判断一个整数序列，是否是某二叉搜索树的后序遍历的结果
bool VerifySquenceOfBST(vector<int> sequence) {
        if(sequence.empty())
            return false;
        int size=sequence.size();
        vector<int> _left;
        vector<int> _right;
        int i=0;
        for(i=0;i<size-1;i++)
        {
            if(sequence[i]<sequence[size-1])
                _left.push_back(sequence[i]);
            else
                break;
        }
        for(;i<size-1;i++)
        {
            if(sequence[i]>sequence[size-1])
                _right.push_back(sequence[i]);
            else
                return false;
        }
        bool left_bool=true,right_bool=true;
        if(!_left.empty())
            left_bool=VerifySquenceOfBST(_left);
        if(!_right.empty())
            right_bool=VerifySquenceOfBST(_right);
        return left&&right;
     }

//2.判断一棵二叉树是否是平衡二叉树
///////////////////////////////////
//(1)
int High(TreeNode* Root)
    {
        if(Root==NULL)
            return 0;
        if(Root->left==NULL&&Root->right==NULL)
            return 1;
        int left=High(Root->left);
        int right=High(Root->right);
        return left>right?left+1:right+1;
    }
    bool IsBalanced_Solution(TreeNode* pRoot) {
        if(pRoot==NULL)
            return true;
        int cur=High(pRoot->left)-High(pRoot->right);
        if(cur<-1||cur>1)
            return false;
        if(pRoot->left)
           IsBalanced_Solution(pRoot->left);
        if(pRoot->right)
           IsBalanced_Solution(pRoot->right);
        return true;
    }
    ///////////////////////////////////////////
    //（2）
    int High(TreeNode* Root)
    {
        if(Root==NULL)
            return 0;
        if(Root->left==NULL&&Root->right==NULL)
            return 1;
        int left=High(Root->left);
        int right=High(Root->right);
        return left>right?left+1:right+1;
    }
    bool IsBalanced_Solution(TreeNode* pRoot) {
        if(pRoot==NULL)
            return true;
        int cur=High(pRoot->left)-High(pRoot->right);
        if(cur>=-1&&cur<=1)
            return IsBalanced_Solution(pRoot->left)&&IsBalanced_Solution(pRoot->right);
        else
            return false;
    }
