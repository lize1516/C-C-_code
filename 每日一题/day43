//1.输入为两行:
 第一行为两个正整数n(1 ≤ n ≤ 1000)，sum(1 ≤ sum ≤ 1000)
 第二行为n个正整数A[i](32位整数)，以空格隔开。
 //
 //0，1 背包问题，用一维数组解决方式如下
#include<iostream>
#include<vector>
using namespace std;

int main()
{
    int n,sum;
    cin>>n>>sum;
    vector<int> cur(n);
    for(int i=0;i<n;i++)
        cin>>cur[i];
    
    vector<long> temp(sum+1);
    temp[0]=1;
    
    for(int i=0;i<n;i++)
    {
        for(int j=sum;j>=cur[i];j--)
            temp[j]+=temp[j-cur[i]];
    }
    cout<<temp[sum]<<endl;
    
    return 0;
}

//2.个测试输入包含1个测试用例，一个字符串str，长度不超过255。
//输出：在一行内输出str中里连续最长的数字串

#include<iostream>
#include<string>
using namespace std;
void Print(string str)
{
    int i=0;
    int size=str.size();
    string temp;
    string ret;
    while(i<size)
    {
        while(i<size&&str[i]>='0'&&str[i]<='9')
        {
            temp.push_back(str[i]);
            i++;
        }
        if(temp.size()>ret.size())
            ret=temp;
        else if(temp.size()==ret.size())     //如果两个数字长度一样，将其合并输出
            ret=ret+temp;        
        temp.clear();
        i++;
    }
    cout<<ret<<endl;
}
int main()
{
    string str;
    cin>>str;
    Print(str);
    return 0;
}
